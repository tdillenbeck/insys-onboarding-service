// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protorepo/services/insys/agreement.proto

package insys // import "weavelab.xyz/protorepo/dist/go/services/insys"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import insysproto "weavelab.xyz/protorepo/dist/go/messages/insysproto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AgreementServiceClient is the client API for AgreementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AgreementServiceClient interface {
	Create(ctx context.Context, in *insysproto.Agreement, opts ...grpc.CallOption) (*insysproto.Agreement, error)
}

type agreementServiceClient struct {
	cc *grpc.ClientConn
}

func NewAgreementServiceClient(cc *grpc.ClientConn) AgreementServiceClient {
	return &agreementServiceClient{cc}
}

func (c *agreementServiceClient) Create(ctx context.Context, in *insysproto.Agreement, opts ...grpc.CallOption) (*insysproto.Agreement, error) {
	out := new(insysproto.Agreement)
	err := c.cc.Invoke(ctx, "/agreementproto.AgreementService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgreementServiceServer is the server API for AgreementService service.
type AgreementServiceServer interface {
	Create(context.Context, *insysproto.Agreement) (*insysproto.Agreement, error)
}

func RegisterAgreementServiceServer(s *grpc.Server, srv AgreementServiceServer) {
	s.RegisterService(&_AgreementService_serviceDesc, srv)
}

func _AgreementService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(insysproto.Agreement)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgreementServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agreementproto.AgreementService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgreementServiceServer).Create(ctx, req.(*insysproto.Agreement))
	}
	return interceptor(ctx, in, info, handler)
}

var _AgreementService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "agreementproto.AgreementService",
	HandlerType: (*AgreementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _AgreementService_Create_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protorepo/services/insys/agreement.proto",
}

// AgreementContentServiceClient is the client API for AgreementContentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AgreementContentServiceClient interface {
	Create(ctx context.Context, in *insysproto.AgreementContent, opts ...grpc.CallOption) (*insysproto.AgreementContent, error)
	ReadByFeature(ctx context.Context, in *insysproto.AgreementContent, opts ...grpc.CallOption) (*insysproto.AgreementContent, error)
}

type agreementContentServiceClient struct {
	cc *grpc.ClientConn
}

func NewAgreementContentServiceClient(cc *grpc.ClientConn) AgreementContentServiceClient {
	return &agreementContentServiceClient{cc}
}

func (c *agreementContentServiceClient) Create(ctx context.Context, in *insysproto.AgreementContent, opts ...grpc.CallOption) (*insysproto.AgreementContent, error) {
	out := new(insysproto.AgreementContent)
	err := c.cc.Invoke(ctx, "/agreementproto.AgreementContentService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agreementContentServiceClient) ReadByFeature(ctx context.Context, in *insysproto.AgreementContent, opts ...grpc.CallOption) (*insysproto.AgreementContent, error) {
	out := new(insysproto.AgreementContent)
	err := c.cc.Invoke(ctx, "/agreementproto.AgreementContentService/ReadByFeature", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgreementContentServiceServer is the server API for AgreementContentService service.
type AgreementContentServiceServer interface {
	Create(context.Context, *insysproto.AgreementContent) (*insysproto.AgreementContent, error)
	ReadByFeature(context.Context, *insysproto.AgreementContent) (*insysproto.AgreementContent, error)
}

func RegisterAgreementContentServiceServer(s *grpc.Server, srv AgreementContentServiceServer) {
	s.RegisterService(&_AgreementContentService_serviceDesc, srv)
}

func _AgreementContentService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(insysproto.AgreementContent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgreementContentServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agreementproto.AgreementContentService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgreementContentServiceServer).Create(ctx, req.(*insysproto.AgreementContent))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgreementContentService_ReadByFeature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(insysproto.AgreementContent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgreementContentServiceServer).ReadByFeature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agreementproto.AgreementContentService/ReadByFeature",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgreementContentServiceServer).ReadByFeature(ctx, req.(*insysproto.AgreementContent))
	}
	return interceptor(ctx, in, info, handler)
}

var _AgreementContentService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "agreementproto.AgreementContentService",
	HandlerType: (*AgreementContentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _AgreementContentService_Create_Handler,
		},
		{
			MethodName: "ReadByFeature",
			Handler:    _AgreementContentService_ReadByFeature_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protorepo/services/insys/agreement.proto",
}

func init() {
	proto.RegisterFile("protorepo/services/insys/agreement.proto", fileDescriptor_agreement_72081295ed3754ad)
}

var fileDescriptor_agreement_72081295ed3754ad = []byte{
	// 192 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0x28, 0x28, 0xca, 0x2f,
	0xc9, 0x2f, 0x4a, 0x2d, 0xc8, 0xd7, 0x2f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0x2d, 0xd6, 0xcf,
	0xcc, 0x2b, 0xae, 0x2c, 0xd6, 0x4f, 0x4c, 0x2f, 0x4a, 0x4d, 0xcd, 0x4d, 0xcd, 0x2b, 0xd1, 0x03,
	0x2b, 0x11, 0xe2, 0x83, 0x0b, 0x80, 0xf9, 0x52, 0x48, 0x3a, 0x73, 0x53, 0x8b, 0x8b, 0x13, 0xd3,
	0x71, 0xe9, 0x34, 0x0a, 0xe1, 0x12, 0x70, 0x84, 0x09, 0x05, 0x43, 0x2c, 0x11, 0x72, 0xe0, 0x62,
	0x73, 0x2e, 0x4a, 0x4d, 0x2c, 0x49, 0x15, 0x92, 0xd4, 0x43, 0x35, 0x58, 0x0f, 0xae, 0x56, 0x0a,
	0xb7, 0x94, 0x12, 0x83, 0xd1, 0x01, 0x46, 0x2e, 0x71, 0x38, 0xdf, 0x39, 0x3f, 0xaf, 0x04, 0xc9,
	0x74, 0x3f, 0xb8, 0xe9, 0x0a, 0x38, 0x8d, 0x80, 0x6a, 0x91, 0x22, 0xa8, 0x42, 0x89, 0x41, 0x28,
	0x94, 0x8b, 0x37, 0x28, 0x35, 0x31, 0xc5, 0xa9, 0xd2, 0x2d, 0x35, 0xb1, 0xa4, 0xb4, 0x88, 0x4a,
	0xc6, 0x3a, 0xe9, 0x47, 0xe9, 0x96, 0xa7, 0x26, 0x96, 0xa5, 0xe6, 0x24, 0x26, 0xe9, 0x55, 0x54,
	0x56, 0xe9, 0x23, 0x42, 0x34, 0x25, 0xb3, 0xb8, 0x44, 0x3f, 0x1d, 0x3d, 0x4e, 0x92, 0xd8, 0xc0,
	0x2a, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x22, 0xb8, 0x4f, 0x75, 0xb6, 0x01, 0x00, 0x00,
}
