// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protorepo/services/insys/netstats.proto

package insys // import "weavelab.xyz/protorepo/dist/go/services/insys"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import insysproto "weavelab.xyz/protorepo/dist/go/messages/insysproto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NetStatsClient is the client API for NetStats service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NetStatsClient interface {
	Create(ctx context.Context, in *insysproto.Netstats, opts ...grpc.CallOption) (*insysproto.SummaryResponse, error)
}

type netStatsClient struct {
	cc *grpc.ClientConn
}

func NewNetStatsClient(cc *grpc.ClientConn) NetStatsClient {
	return &netStatsClient{cc}
}

func (c *netStatsClient) Create(ctx context.Context, in *insysproto.Netstats, opts ...grpc.CallOption) (*insysproto.SummaryResponse, error) {
	out := new(insysproto.SummaryResponse)
	err := c.cc.Invoke(ctx, "/netstats.NetStats/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NetStatsServer is the server API for NetStats service.
type NetStatsServer interface {
	Create(context.Context, *insysproto.Netstats) (*insysproto.SummaryResponse, error)
}

func RegisterNetStatsServer(s *grpc.Server, srv NetStatsServer) {
	s.RegisterService(&_NetStats_serviceDesc, srv)
}

func _NetStats_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(insysproto.Netstats)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetStatsServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netstats.NetStats/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetStatsServer).Create(ctx, req.(*insysproto.Netstats))
	}
	return interceptor(ctx, in, info, handler)
}

var _NetStats_serviceDesc = grpc.ServiceDesc{
	ServiceName: "netstats.NetStats",
	HandlerType: (*NetStatsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _NetStats_Create_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protorepo/services/insys/netstats.proto",
}

// SummariesClient is the client API for Summaries service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SummariesClient interface {
	Read(ctx context.Context, in *insysproto.SummariesRequest, opts ...grpc.CallOption) (*insysproto.SummariesResponse, error)
}

type summariesClient struct {
	cc *grpc.ClientConn
}

func NewSummariesClient(cc *grpc.ClientConn) SummariesClient {
	return &summariesClient{cc}
}

func (c *summariesClient) Read(ctx context.Context, in *insysproto.SummariesRequest, opts ...grpc.CallOption) (*insysproto.SummariesResponse, error) {
	out := new(insysproto.SummariesResponse)
	err := c.cc.Invoke(ctx, "/netstats.Summaries/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SummariesServer is the server API for Summaries service.
type SummariesServer interface {
	Read(context.Context, *insysproto.SummariesRequest) (*insysproto.SummariesResponse, error)
}

func RegisterSummariesServer(s *grpc.Server, srv SummariesServer) {
	s.RegisterService(&_Summaries_serviceDesc, srv)
}

func _Summaries_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(insysproto.SummariesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SummariesServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netstats.Summaries/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SummariesServer).Read(ctx, req.(*insysproto.SummariesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Summaries_serviceDesc = grpc.ServiceDesc{
	ServiceName: "netstats.Summaries",
	HandlerType: (*SummariesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Read",
			Handler:    _Summaries_Read_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protorepo/services/insys/netstats.proto",
}

func init() {
	proto.RegisterFile("protorepo/services/insys/netstats.proto", fileDescriptor_netstats_231b27cd93bdf585)
}

var fileDescriptor_netstats_231b27cd93bdf585 = []byte{
	// 196 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x90, 0x41, 0x6b, 0x83, 0x40,
	0x10, 0x85, 0x7b, 0x28, 0x62, 0xf7, 0xb8, 0x97, 0x82, 0x87, 0xb6, 0xf4, 0xd2, 0x53, 0x77, 0xc1,
	0xfe, 0x83, 0x7a, 0x2c, 0x58, 0xd0, 0x4b, 0xe9, 0x6d, 0x8d, 0x0f, 0x59, 0x88, 0xae, 0xd9, 0x19,
	0x4d, 0xcc, 0xaf, 0x0f, 0x31, 0x2c, 0x09, 0x12, 0x8f, 0xf3, 0xe6, 0xfb, 0x1e, 0xcc, 0x88, 0x8f,
	0xde, 0x3b, 0x76, 0x1e, 0xbd, 0xd3, 0x04, 0x3f, 0xda, 0x0d, 0x48, 0xdb, 0x8e, 0x26, 0xd2, 0x1d,
	0x98, 0xd8, 0x30, 0xa9, 0x99, 0x90, 0x71, 0x98, 0x93, 0x1b, 0xa5, 0x05, 0x91, 0x69, 0x56, 0x94,
	0xf4, 0x57, 0xc4, 0x39, 0xb8, 0x3c, 0x27, 0x32, 0x13, 0x51, 0xe6, 0x61, 0x18, 0xf2, 0x59, 0x05,
	0x6c, 0xa6, 0x54, 0x1e, 0x7a, 0x5f, 0x16, 0x8b, 0x72, 0x68, 0x5b, 0xe3, 0xa7, 0x02, 0xd4, 0xbb,
	0x8e, 0xf0, 0xfe, 0x90, 0xfe, 0x89, 0xa7, 0x4b, 0x68, 0x41, 0xf2, 0x47, 0x3c, 0x16, 0x30, 0xb5,
	0x7c, 0xbd, 0xab, 0x59, 0x50, 0x81, 0xdd, 0x00, 0xe2, 0xe4, 0x6d, 0x1d, 0x08, 0xcd, 0xdf, 0xfa,
	0xff, 0x73, 0x0f, 0x33, 0x62, 0x6b, 0x2a, 0x75, 0x98, 0x8e, 0xfa, 0x7a, 0x62, 0x6d, 0x89, 0x75,
	0xb3, 0xfc, 0x4e, 0x15, 0xcd, 0xc4, 0xd7, 0x29, 0x00, 0x00, 0xff, 0xff, 0xb1, 0x66, 0x85, 0x22,
	0x40, 0x01, 0x00, 0x00,
}
