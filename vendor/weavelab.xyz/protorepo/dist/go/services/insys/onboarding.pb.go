// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protorepo/services/insys/onboarding.proto

package insys // import "weavelab.xyz/protorepo/dist/go/services/insys"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import insysproto "weavelab.xyz/protorepo/dist/go/messages/insysproto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// OnboardingClient is the client API for Onboarding service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OnboardingClient interface {
	CreateTaskInstancesFromTasks(ctx context.Context, in *insysproto.CreateTaskInstancesFromTasksRequest, opts ...grpc.CallOption) (*insysproto.TaskInstancesResponse, error)
	Category(ctx context.Context, in *insysproto.CategoryRequest, opts ...grpc.CallOption) (*insysproto.CategoryResponse, error)
	TaskInstances(ctx context.Context, in *insysproto.TaskInstancesRequest, opts ...grpc.CallOption) (*insysproto.TaskInstancesResponse, error)
	UpdateTaskInstance(ctx context.Context, in *insysproto.UpdateTaskInstanceRequest, opts ...grpc.CallOption) (*insysproto.UpdateTaskInstanceResponse, error)
}

type onboardingClient struct {
	cc *grpc.ClientConn
}

func NewOnboardingClient(cc *grpc.ClientConn) OnboardingClient {
	return &onboardingClient{cc}
}

func (c *onboardingClient) CreateTaskInstancesFromTasks(ctx context.Context, in *insysproto.CreateTaskInstancesFromTasksRequest, opts ...grpc.CallOption) (*insysproto.TaskInstancesResponse, error) {
	out := new(insysproto.TaskInstancesResponse)
	err := c.cc.Invoke(ctx, "/onboardingproto.Onboarding/CreateTaskInstancesFromTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onboardingClient) Category(ctx context.Context, in *insysproto.CategoryRequest, opts ...grpc.CallOption) (*insysproto.CategoryResponse, error) {
	out := new(insysproto.CategoryResponse)
	err := c.cc.Invoke(ctx, "/onboardingproto.Onboarding/Category", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onboardingClient) TaskInstances(ctx context.Context, in *insysproto.TaskInstancesRequest, opts ...grpc.CallOption) (*insysproto.TaskInstancesResponse, error) {
	out := new(insysproto.TaskInstancesResponse)
	err := c.cc.Invoke(ctx, "/onboardingproto.Onboarding/TaskInstances", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onboardingClient) UpdateTaskInstance(ctx context.Context, in *insysproto.UpdateTaskInstanceRequest, opts ...grpc.CallOption) (*insysproto.UpdateTaskInstanceResponse, error) {
	out := new(insysproto.UpdateTaskInstanceResponse)
	err := c.cc.Invoke(ctx, "/onboardingproto.Onboarding/UpdateTaskInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Onboarding service

type OnboardingServer interface {
	CreateTaskInstancesFromTasks(context.Context, *insysproto.CreateTaskInstancesFromTasksRequest) (*insysproto.TaskInstancesResponse, error)
	Category(context.Context, *insysproto.CategoryRequest) (*insysproto.CategoryResponse, error)
	TaskInstances(context.Context, *insysproto.TaskInstancesRequest) (*insysproto.TaskInstancesResponse, error)
	UpdateTaskInstance(context.Context, *insysproto.UpdateTaskInstanceRequest) (*insysproto.UpdateTaskInstanceResponse, error)
}

func RegisterOnboardingServer(s *grpc.Server, srv OnboardingServer) {
	s.RegisterService(&_Onboarding_serviceDesc, srv)
}

func _Onboarding_CreateTaskInstancesFromTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(insysproto.CreateTaskInstancesFromTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnboardingServer).CreateTaskInstancesFromTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/onboardingproto.Onboarding/CreateTaskInstancesFromTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnboardingServer).CreateTaskInstancesFromTasks(ctx, req.(*insysproto.CreateTaskInstancesFromTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Onboarding_Category_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(insysproto.CategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnboardingServer).Category(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/onboardingproto.Onboarding/Category",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnboardingServer).Category(ctx, req.(*insysproto.CategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Onboarding_TaskInstances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(insysproto.TaskInstancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnboardingServer).TaskInstances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/onboardingproto.Onboarding/TaskInstances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnboardingServer).TaskInstances(ctx, req.(*insysproto.TaskInstancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Onboarding_UpdateTaskInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(insysproto.UpdateTaskInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnboardingServer).UpdateTaskInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/onboardingproto.Onboarding/UpdateTaskInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnboardingServer).UpdateTaskInstance(ctx, req.(*insysproto.UpdateTaskInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Onboarding_serviceDesc = grpc.ServiceDesc{
	ServiceName: "onboardingproto.Onboarding",
	HandlerType: (*OnboardingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTaskInstancesFromTasks",
			Handler:    _Onboarding_CreateTaskInstancesFromTasks_Handler,
		},
		{
			MethodName: "Category",
			Handler:    _Onboarding_Category_Handler,
		},
		{
			MethodName: "TaskInstances",
			Handler:    _Onboarding_TaskInstances_Handler,
		},
		{
			MethodName: "UpdateTaskInstance",
			Handler:    _Onboarding_UpdateTaskInstance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protorepo/services/insys/onboarding.proto",
}

func init() {
	proto.RegisterFile("protorepo/services/insys/onboarding.proto", fileDescriptor_onboarding_7f0f0c5d06f26e23)
}

var fileDescriptor_onboarding_7f0f0c5d06f26e23 = []byte{
	// 243 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0xc1, 0x4a, 0xc4, 0x30,
	0x10, 0x86, 0x05, 0x41, 0x24, 0x20, 0xc2, 0x1c, 0x17, 0x0f, 0x2a, 0x28, 0xa8, 0x98, 0x80, 0xfa,
	0x04, 0x2e, 0x08, 0x9e, 0xc4, 0x45, 0x2f, 0x9e, 0x9c, 0x6e, 0x87, 0x10, 0x74, 0x33, 0x31, 0x13,
	0x57, 0xeb, 0xc1, 0x87, 0xf2, 0x09, 0xc5, 0x62, 0xb7, 0xb6, 0xc1, 0xea, 0x5e, 0xff, 0x7c, 0xff,
	0x7c, 0x43, 0x12, 0x75, 0x10, 0x22, 0x27, 0x8e, 0x14, 0xd8, 0x08, 0xc5, 0xb9, 0x9b, 0x92, 0x18,
	0xe7, 0xa5, 0x12, 0xc3, 0xbe, 0x60, 0x8c, 0xa5, 0xf3, 0x56, 0xd7, 0x0c, 0x6c, 0xb6, 0x49, 0x1d,
	0x8c, 0x7e, 0x74, 0x67, 0x24, 0x82, 0xf6, 0xd7, 0xee, 0xc9, 0xc7, 0xaa, 0x52, 0x57, 0x8b, 0x10,
	0xde, 0xd5, 0xd6, 0x38, 0x12, 0x26, 0xba, 0x41, 0x79, 0xb8, 0xf4, 0x92, 0xd0, 0x4f, 0x49, 0x2e,
	0x22, 0xcf, 0xbe, 0x02, 0x81, 0x33, 0xdd, 0x73, 0xe9, 0x21, 0x7c, 0x42, 0x4f, 0xcf, 0x24, 0x69,
	0xb4, 0x9f, 0xb5, 0x3a, 0xfc, 0x84, 0x24, 0xb0, 0x17, 0xda, 0x5d, 0x81, 0x6b, 0xb5, 0x3e, 0xc6,
	0x44, 0x96, 0x63, 0x05, 0xdb, 0xb9, 0xeb, 0xfb, 0xa8, 0x99, 0xbb, 0x33, 0x40, 0x2c, 0x46, 0xde,
	0xab, 0x8d, 0x8e, 0x0d, 0xf6, 0xfe, 0xda, 0x66, 0xd9, 0xa5, 0x59, 0xc1, 0x6d, 0x28, 0x7b, 0xb7,
	0x00, 0x87, 0x59, 0x3f, 0x87, 0x1a, 0xd7, 0xd1, 0xbf, 0xd8, 0x46, 0x78, 0x6e, 0xee, 0x8e, 0x5f,
	0x08, 0xe7, 0xf4, 0x88, 0x85, 0x7e, 0xad, 0xde, 0x4c, 0xfb, 0xdc, 0xa5, 0x93, 0x64, 0x6c, 0xff,
	0xcb, 0x14, 0x6b, 0x35, 0x71, 0xfa, 0x19, 0x00, 0x00, 0xff, 0xff, 0x7f, 0xc0, 0x89, 0xd0, 0x55,
	0x02, 0x00, 0x00,
}
