package version

import (
	"log"
	"os"
	"path/filepath"
	"runtime"
	"runtime/debug"
	"strings"
	"time"
)

var (
	// these may be replaced at compile time
	// only strings can be replaced at compile time
	name string

	major string
	minor string

	commitHash string
	branch     string
)

// default behavior for disabling build variable replacement checks
var disableBuildChecks = func() bool {

	d := os.Getenv("DEVELOPMENT")
	if strings.EqualFold(d, "true") {
		return true
	}

	// check to see if we're running tests
	if isGoTest {
		return true
	}

	if runtime.GOOS == "windows" || runtime.GOOS == "darwin" {
		return true
	}

	return false
}()

func init() {

	hostname, _ := os.Hostname()

	name = selfName()

	l.Lock()
	_info = AppInfo{

		Name:      name,
		GitHash:   commitHash,
		GitBranch: branch,

		FileModificationTime: timeStamp(),
		Path:                 currentFolder(),

		GoVersion: runtime.Version(),
		Hostname:  hostname,

		StartTime: time.Now(),
	}
	l.Unlock()

	setVersion()

	checkBuild()
}

func checkBuild() {
	if disableBuildChecks {
		return
	}

	if name == "" {
		log.Fatal("wlib/version.name is empty")
	}

	if commitHash == "" {
		log.Fatal("wlib/version.commitHash is empty")
	}

	if branch == "" {
		log.Fatal("wlib/version.branch is empty")
	}
}

func selfName() string {
	_, file := filepath.Split(os.Args[0])
	return file
}

func currentFolder() string {
	s, _ := filepath.Abs(os.Args[0])
	return s
}

func timeStamp() time.Time {
	stat, err := os.Stat(currentFolder())
	if err != nil {
		return time.Time{}
	}
	return stat.ModTime()
}

// determine if go test is running at startup
var isGoTest = func() bool {

	stack := debug.Stack()

	// test under go1.9
	if strings.Contains(string(stack), `main.init()
	<autogenerated>`) {
		return true
	}

	// go1.8
	if strings.Contains(string(stack), "_test/_testmain.go") {
		return true
	}

	if strings.HasSuffix(os.Args[0], ".test") {
		return true
	}

	return false
}()
