// Code generated by protoc-gen-go.
// source: wlog.proto
// DO NOT EDIT!

/*
Package wlogproto is a generated protocol buffer package.

It is generated from these files:
	wlog.proto

It has these top-level messages:
	Log
	StackEntry
	Duration
*/
package wlogproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Level int32

const (
	Level_DEBUG  Level = 0
	Level_INFO   Level = 1
	Level_ERROR  Level = 2
	Level_DDEBUG Level = 99
)

var Level_name = map[int32]string{
	0:  "DEBUG",
	1:  "INFO",
	2:  "ERROR",
	99: "DDEBUG",
}
var Level_value = map[string]int32{
	"DEBUG":  0,
	"INFO":   1,
	"ERROR":  2,
	"DDEBUG": 99,
}

func (x Level) String() string {
	return proto.EnumName(Level_name, int32(x))
}
func (Level) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Log struct {
	Level        Level                `protobuf:"varint,1,opt,name=level,enum=wlogproto.Level" json:"level,omitempty"`
	Message      string               `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Timestamp    int64                `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
	TagsString   map[string]string    `protobuf:"bytes,4,rep,name=tagsString" json:"tagsString,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	TagsInt      map[string]int32     `protobuf:"bytes,5,rep,name=tagsInt" json:"tagsInt,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	TagsInt64    map[string]int64     `protobuf:"bytes,6,rep,name=tagsInt64" json:"tagsInt64,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	TagsFloat    map[string]float32   `protobuf:"bytes,7,rep,name=tagsFloat" json:"tagsFloat,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	TagsBool     map[string]bool      `protobuf:"bytes,8,rep,name=tagsBool" json:"tagsBool,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	TagsDuration map[string]*Duration `protobuf:"bytes,9,rep,name=tagsDuration" json:"tagsDuration,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	StackTrace   []*StackEntry        `protobuf:"bytes,10,rep,name=stackTrace" json:"stackTrace,omitempty"`
}

func (m *Log) Reset()                    { *m = Log{} }
func (m *Log) String() string            { return proto.CompactTextString(m) }
func (*Log) ProtoMessage()               {}
func (*Log) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Log) GetLevel() Level {
	if m != nil {
		return m.Level
	}
	return Level_DEBUG
}

func (m *Log) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Log) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Log) GetTagsString() map[string]string {
	if m != nil {
		return m.TagsString
	}
	return nil
}

func (m *Log) GetTagsInt() map[string]int32 {
	if m != nil {
		return m.TagsInt
	}
	return nil
}

func (m *Log) GetTagsInt64() map[string]int64 {
	if m != nil {
		return m.TagsInt64
	}
	return nil
}

func (m *Log) GetTagsFloat() map[string]float32 {
	if m != nil {
		return m.TagsFloat
	}
	return nil
}

func (m *Log) GetTagsBool() map[string]bool {
	if m != nil {
		return m.TagsBool
	}
	return nil
}

func (m *Log) GetTagsDuration() map[string]*Duration {
	if m != nil {
		return m.TagsDuration
	}
	return nil
}

func (m *Log) GetStackTrace() []*StackEntry {
	if m != nil {
		return m.StackTrace
	}
	return nil
}

type StackEntry struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	File string `protobuf:"bytes,2,opt,name=file" json:"file,omitempty"`
	Line int32  `protobuf:"varint,3,opt,name=line" json:"line,omitempty"`
}

func (m *StackEntry) Reset()                    { *m = StackEntry{} }
func (m *StackEntry) String() string            { return proto.CompactTextString(m) }
func (*StackEntry) ProtoMessage()               {}
func (*StackEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *StackEntry) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *StackEntry) GetFile() string {
	if m != nil {
		return m.File
	}
	return ""
}

func (m *StackEntry) GetLine() int32 {
	if m != nil {
		return m.Line
	}
	return 0
}

type Duration struct {
	Duration int64 `protobuf:"varint,1,opt,name=duration" json:"duration,omitempty"`
}

func (m *Duration) Reset()                    { *m = Duration{} }
func (m *Duration) String() string            { return proto.CompactTextString(m) }
func (*Duration) ProtoMessage()               {}
func (*Duration) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Duration) GetDuration() int64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func init() {
	proto.RegisterType((*Log)(nil), "wlogproto.Log")
	proto.RegisterType((*StackEntry)(nil), "wlogproto.StackEntry")
	proto.RegisterType((*Duration)(nil), "wlogproto.Duration")
	proto.RegisterEnum("wlogproto.Level", Level_name, Level_value)
}

func init() { proto.RegisterFile("wlog.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 495 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0x93, 0x5f, 0x6f, 0xd3, 0x30,
	0x14, 0xc5, 0x49, 0xd3, 0xb4, 0xc9, 0xdd, 0x18, 0xc1, 0x80, 0x64, 0x95, 0x81, 0xa2, 0x0a, 0x55,
	0x05, 0x89, 0x54, 0xea, 0xfe, 0x68, 0xda, 0x80, 0x87, 0xaa, 0x1d, 0x54, 0x9a, 0x98, 0x94, 0x95,
	0x17, 0xde, 0xdc, 0xce, 0x84, 0x68, 0x4e, 0x3c, 0x25, 0x6e, 0xa7, 0x7e, 0x12, 0xbe, 0x2e, 0xb2,
	0xd3, 0x24, 0x2e, 0x64, 0xea, 0x53, 0xcf, 0xbd, 0xf7, 0xfc, 0x6e, 0x95, 0x9c, 0x1b, 0x80, 0x07,
	0xc6, 0x43, 0xff, 0x3e, 0xe5, 0x82, 0x23, 0x47, 0x6a, 0x25, 0xbb, 0x7f, 0xda, 0x60, 0x5e, 0xf1,
	0x10, 0xf5, 0xc0, 0x62, 0x74, 0x45, 0x19, 0x36, 0x3c, 0xa3, 0x7f, 0x30, 0x74, 0xfd, 0xd2, 0xe2,
	0x5f, 0xc9, 0x7e, 0x90, 0x8f, 0x11, 0x86, 0x76, 0x4c, 0xb3, 0x8c, 0x84, 0x14, 0x37, 0x3c, 0xa3,
	0xef, 0x04, 0x45, 0x89, 0x0e, 0xc1, 0x11, 0x51, 0x4c, 0x33, 0x41, 0xe2, 0x7b, 0x6c, 0x7a, 0x46,
	0xdf, 0x0c, 0xaa, 0x06, 0xfa, 0x02, 0x20, 0x48, 0x98, 0xdd, 0x88, 0x34, 0x4a, 0x42, 0xdc, 0xf4,
	0xcc, 0xfe, 0xde, 0xf0, 0xad, 0xfe, 0x27, 0x3c, 0xf4, 0x67, 0xa5, 0x61, 0x92, 0x88, 0x74, 0x1d,
	0x68, 0x04, 0x3a, 0x81, 0xb6, 0xac, 0xa6, 0x89, 0xc0, 0x96, 0x82, 0x5f, 0xd7, 0xc0, 0xd3, 0x44,
	0xe4, 0x64, 0xe1, 0x45, 0x17, 0xe0, 0x6c, 0xe4, 0xe9, 0x31, 0x6e, 0x29, 0xf0, 0x4d, 0x3d, 0x78,
	0x7a, 0x9c, 0xa3, 0x95, 0xbf, 0x80, 0x2f, 0x19, 0x27, 0x02, 0xb7, 0x1f, 0x85, 0xd5, 0x5c, 0x83,
	0x55, 0x8d, 0xce, 0xc0, 0x96, 0xc5, 0x88, 0x73, 0x86, 0x6d, 0xc5, 0x1e, 0xd6, 0xb0, 0x72, 0x9c,
	0xa3, 0xa5, 0x1b, 0x8d, 0x61, 0x5f, 0xea, 0xf1, 0x32, 0x25, 0x22, 0xe2, 0x09, 0x76, 0x14, 0xed,
	0xd5, 0xd0, 0x85, 0x25, 0xdf, 0xb0, 0x45, 0xa1, 0x13, 0x80, 0x4c, 0x90, 0xc5, 0xdd, 0x2c, 0x25,
	0x0b, 0x8a, 0x41, 0xed, 0x78, 0xa5, 0xed, 0xb8, 0x91, 0xc3, 0xcd, 0x7b, 0xae, 0x8c, 0x9d, 0xcf,
	0xf0, 0xec, 0x9f, 0x18, 0x90, 0x0b, 0xe6, 0x1d, 0x5d, 0xab, 0xc3, 0x70, 0x02, 0x29, 0xd1, 0x4b,
	0xb0, 0x56, 0x84, 0x2d, 0x8b, 0x13, 0xc8, 0x8b, 0xf3, 0xc6, 0x99, 0xd1, 0x39, 0x87, 0x7d, 0x3d,
	0x88, 0x5d, 0xac, 0xa5, 0xb3, 0x9f, 0xe0, 0x60, 0x3b, 0x8b, 0x5d, 0xb4, 0x59, 0x43, 0x57, 0x61,
	0xec, 0xa2, 0x1b, 0x3a, 0x7d, 0x01, 0x4f, 0xb7, 0xe2, 0xd8, 0x05, 0xdb, 0x3a, 0x3c, 0x83, 0xe7,
	0xff, 0xa5, 0x51, 0xb3, 0xe0, 0xbd, 0xbe, 0x60, 0x6f, 0xf8, 0x42, 0x0b, 0xa3, 0x40, 0xb5, 0xad,
	0xdd, 0x6f, 0x00, 0x55, 0x46, 0x08, 0x41, 0x33, 0x21, 0x31, 0xdd, 0xec, 0x53, 0x5a, 0xf6, 0x7e,
	0x45, 0xac, 0x48, 0x41, 0x69, 0xd9, 0x63, 0x51, 0x42, 0xd5, 0x07, 0x68, 0x05, 0x4a, 0x77, 0x7b,
	0x60, 0x97, 0x67, 0xd1, 0x01, 0xfb, 0xb6, 0x38, 0x2c, 0x43, 0xbd, 0xc3, 0xb2, 0xfe, 0x70, 0x04,
	0x96, 0xfa, 0xd6, 0x91, 0x03, 0xd6, 0x78, 0x32, 0xfa, 0xf1, 0xd5, 0x7d, 0x82, 0x6c, 0x68, 0x4e,
	0xbf, 0x5f, 0x5e, 0xbb, 0x86, 0x6c, 0x4e, 0x82, 0xe0, 0x3a, 0x70, 0x1b, 0x08, 0xa0, 0x35, 0xce,
	0x0d, 0x8b, 0x51, 0xef, 0xe7, 0xbb, 0x30, 0x12, 0xbf, 0x97, 0x73, 0x7f, 0xc1, 0xe3, 0xc1, 0x03,
	0x25, 0x2b, 0xfa, 0x91, 0x91, 0xf9, 0x40, 0x3e, 0xdc, 0xed, 0xa0, 0x7c, 0xc4, 0x79, 0x4b, 0xfd,
	0x1c, 0xfd, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x3a, 0x60, 0x88, 0xba, 0x88, 0x04, 0x00, 0x00,
}
