// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protorepo/services/platform/featureflags.proto

package platform

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
	platformproto "weavelab.xyz/monorail/shared/protorepo/dist/go/messages/platformproto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("protorepo/services/platform/featureflags.proto", fileDescriptor_59fc68fb43530ce5)
}

var fileDescriptor_59fc68fb43530ce5 = []byte{
	// 272 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x86, 0x73, 0x10, 0x0f, 0x4b, 0x2f, 0x5d, 0x41, 0x24, 0xc7, 0xa8, 0xa0, 0x08, 0x59, 0xd0,
	0x17, 0x90, 0x1c, 0x7a, 0xaa, 0x07, 0x0b, 0x5e, 0xc4, 0xcb, 0xb4, 0x99, 0xac, 0x0b, 0x49, 0x66,
	0xdd, 0xd9, 0x56, 0xeb, 0xc9, 0x47, 0x97, 0x26, 0x44, 0xb7, 0x89, 0xad, 0xe2, 0xf5, 0xcf, 0x37,
	0xdf, 0xcf, 0x64, 0x47, 0xa4, 0xd6, 0x91, 0x27, 0x87, 0x96, 0x14, 0xa3, 0x5b, 0x99, 0x05, 0xb2,
	0xb2, 0x25, 0xf8, 0x82, 0x5c, 0xa5, 0x0a, 0x04, 0xbf, 0x74, 0x58, 0x94, 0xa0, 0xb9, 0x05, 0xe5,
	0x38, 0xcc, 0x9a, 0x28, 0x0e, 0x14, 0x15, 0x32, 0x83, 0xde, 0xaf, 0xb8, 0xfe, 0x38, 0x10, 0xa3,
	0x49, 0x1b, 0x4f, 0x36, 0xb1, 0xd4, 0x62, 0x3c, 0x35, 0xec, 0xa7, 0xb4, 0x00, 0x6f, 0xa8, 0x6e,
	0xc3, 0xd3, 0xb4, 0x73, 0x34, 0x53, 0xe9, 0xd6, 0xd7, 0x19, 0xbe, 0x2c, 0x91, 0x7d, 0x7c, 0xd5,
	0x83, 0x42, 0x6d, 0x37, 0x30, 0x43, 0xb6, 0x54, 0x33, 0x26, 0x91, 0xbc, 0x17, 0xa3, 0x50, 0xf3,
	0xb7, 0x8e, 0x78, 0x77, 0x47, 0x12, 0xc9, 0x4a, 0xc8, 0x07, 0x9b, 0x83, 0xc7, 0x2d, 0xf1, 0xc5,
	0x1e, 0x71, 0x8b, 0xff, 0x73, 0x03, 0x2d, 0x8e, 0xef, 0x80, 0x79, 0xe8, 0x93, 0x67, 0x3d, 0xd1,
	0x06, 0x1b, 0xd6, 0x9d, 0xff, 0x42, 0x7d, 0x15, 0x3d, 0x89, 0xa3, 0xf0, 0x4d, 0x38, 0x5b, 0x37,
	0x8b, 0x5d, 0xf6, 0x17, 0x1b, 0x32, 0x5d, 0xd5, 0xc9, 0x8e, 0x7f, 0xc0, 0x49, 0x94, 0x65, 0x8f,
	0xb7, 0xaf, 0x08, 0x2b, 0x2c, 0x61, 0x9e, 0xbe, 0xad, 0xdf, 0x55, 0x45, 0x35, 0x39, 0x30, 0xa5,
	0xe2, 0x67, 0x70, 0x98, 0xab, 0xef, 0x8b, 0xca, 0x0d, 0x7b, 0xa5, 0x7f, 0x38, 0xce, 0xf9, 0x61,
	0x03, 0xdd, 0x7c, 0x06, 0x00, 0x00, 0xff, 0xff, 0xa8, 0x20, 0xc7, 0xdb, 0xc2, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FeatureFlagsClient is the client API for FeatureFlags service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FeatureFlagsClient interface {
	ListLocationFlags(ctx context.Context, in *platformproto.LocationFlagsRequest, opts ...grpc.CallOption) (*platformproto.FeatureFlagsLocationResponse, error)
	LocationFlag(ctx context.Context, in *platformproto.LocationFlagsRequest, opts ...grpc.CallOption) (*platformproto.FeatureFlag, error)
	// Updates the FeatureFlag Value, returns the new Value
	UpdateLocationFlag(ctx context.Context, in *platformproto.LocationFlagUpdateRequest, opts ...grpc.CallOption) (*platformproto.FeatureFlagsLocationResponse, error)
	MassLocationFlagUpdate(ctx context.Context, in *platformproto.MassFlagUpdateRequest, opts ...grpc.CallOption) (*platformproto.MassFlagUpdateResponse, error)
	ListLocationsByFlag(ctx context.Context, in *platformproto.ListLocationsByFlagRequest, opts ...grpc.CallOption) (*platformproto.Locations, error)
}

type featureFlagsClient struct {
	cc *grpc.ClientConn
}

func NewFeatureFlagsClient(cc *grpc.ClientConn) FeatureFlagsClient {
	return &featureFlagsClient{cc}
}

func (c *featureFlagsClient) ListLocationFlags(ctx context.Context, in *platformproto.LocationFlagsRequest, opts ...grpc.CallOption) (*platformproto.FeatureFlagsLocationResponse, error) {
	out := new(platformproto.FeatureFlagsLocationResponse)
	err := c.cc.Invoke(ctx, "/featureflagsproto.FeatureFlags/ListLocationFlags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureFlagsClient) LocationFlag(ctx context.Context, in *platformproto.LocationFlagsRequest, opts ...grpc.CallOption) (*platformproto.FeatureFlag, error) {
	out := new(platformproto.FeatureFlag)
	err := c.cc.Invoke(ctx, "/featureflagsproto.FeatureFlags/LocationFlag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureFlagsClient) UpdateLocationFlag(ctx context.Context, in *platformproto.LocationFlagUpdateRequest, opts ...grpc.CallOption) (*platformproto.FeatureFlagsLocationResponse, error) {
	out := new(platformproto.FeatureFlagsLocationResponse)
	err := c.cc.Invoke(ctx, "/featureflagsproto.FeatureFlags/UpdateLocationFlag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureFlagsClient) MassLocationFlagUpdate(ctx context.Context, in *platformproto.MassFlagUpdateRequest, opts ...grpc.CallOption) (*platformproto.MassFlagUpdateResponse, error) {
	out := new(platformproto.MassFlagUpdateResponse)
	err := c.cc.Invoke(ctx, "/featureflagsproto.FeatureFlags/MassLocationFlagUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureFlagsClient) ListLocationsByFlag(ctx context.Context, in *platformproto.ListLocationsByFlagRequest, opts ...grpc.CallOption) (*platformproto.Locations, error) {
	out := new(platformproto.Locations)
	err := c.cc.Invoke(ctx, "/featureflagsproto.FeatureFlags/ListLocationsByFlag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FeatureFlagsServer is the server API for FeatureFlags service.
type FeatureFlagsServer interface {
	ListLocationFlags(context.Context, *platformproto.LocationFlagsRequest) (*platformproto.FeatureFlagsLocationResponse, error)
	LocationFlag(context.Context, *platformproto.LocationFlagsRequest) (*platformproto.FeatureFlag, error)
	// Updates the FeatureFlag Value, returns the new Value
	UpdateLocationFlag(context.Context, *platformproto.LocationFlagUpdateRequest) (*platformproto.FeatureFlagsLocationResponse, error)
	MassLocationFlagUpdate(context.Context, *platformproto.MassFlagUpdateRequest) (*platformproto.MassFlagUpdateResponse, error)
	ListLocationsByFlag(context.Context, *platformproto.ListLocationsByFlagRequest) (*platformproto.Locations, error)
}

func RegisterFeatureFlagsServer(s *grpc.Server, srv FeatureFlagsServer) {
	s.RegisterService(&_FeatureFlags_serviceDesc, srv)
}

func _FeatureFlags_ListLocationFlags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(platformproto.LocationFlagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureFlagsServer).ListLocationFlags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/featureflagsproto.FeatureFlags/ListLocationFlags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureFlagsServer).ListLocationFlags(ctx, req.(*platformproto.LocationFlagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureFlags_LocationFlag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(platformproto.LocationFlagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureFlagsServer).LocationFlag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/featureflagsproto.FeatureFlags/LocationFlag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureFlagsServer).LocationFlag(ctx, req.(*platformproto.LocationFlagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureFlags_UpdateLocationFlag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(platformproto.LocationFlagUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureFlagsServer).UpdateLocationFlag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/featureflagsproto.FeatureFlags/UpdateLocationFlag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureFlagsServer).UpdateLocationFlag(ctx, req.(*platformproto.LocationFlagUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureFlags_MassLocationFlagUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(platformproto.MassFlagUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureFlagsServer).MassLocationFlagUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/featureflagsproto.FeatureFlags/MassLocationFlagUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureFlagsServer).MassLocationFlagUpdate(ctx, req.(*platformproto.MassFlagUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureFlags_ListLocationsByFlag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(platformproto.ListLocationsByFlagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureFlagsServer).ListLocationsByFlag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/featureflagsproto.FeatureFlags/ListLocationsByFlag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureFlagsServer).ListLocationsByFlag(ctx, req.(*platformproto.ListLocationsByFlagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FeatureFlags_serviceDesc = grpc.ServiceDesc{
	ServiceName: "featureflagsproto.FeatureFlags",
	HandlerType: (*FeatureFlagsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListLocationFlags",
			Handler:    _FeatureFlags_ListLocationFlags_Handler,
		},
		{
			MethodName: "LocationFlag",
			Handler:    _FeatureFlags_LocationFlag_Handler,
		},
		{
			MethodName: "UpdateLocationFlag",
			Handler:    _FeatureFlags_UpdateLocationFlag_Handler,
		},
		{
			MethodName: "MassLocationFlagUpdate",
			Handler:    _FeatureFlags_MassLocationFlagUpdate_Handler,
		},
		{
			MethodName: "ListLocationsByFlag",
			Handler:    _FeatureFlags_ListLocationsByFlag_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protorepo/services/platform/featureflags.proto",
}
