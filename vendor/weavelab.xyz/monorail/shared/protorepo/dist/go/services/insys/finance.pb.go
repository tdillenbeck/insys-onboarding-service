// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protorepo/services/insys/finance.proto

package insys

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
	insysproto "weavelab.xyz/monorail/shared/protorepo/dist/go/messages/insysproto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("protorepo/services/insys/finance.proto", fileDescriptor_4b7894dc36daf0ea)
}

var fileDescriptor_4b7894dc36daf0ea = []byte{
	// 169 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x2b, 0x28, 0xca, 0x2f,
	0xc9, 0x2f, 0x4a, 0x2d, 0xc8, 0xd7, 0x2f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0x2d, 0xd6, 0xcf,
	0xcc, 0x2b, 0xae, 0x2c, 0xd6, 0x4f, 0xcb, 0xcc, 0x4b, 0xcc, 0x4b, 0x4e, 0xd5, 0x03, 0x2b, 0x10,
	0xe2, 0x81, 0x72, 0xc1, 0x3c, 0x29, 0x24, 0x5d, 0xb9, 0xa9, 0xc5, 0xc5, 0x89, 0xe9, 0xd8, 0x75,
	0x19, 0xf9, 0x71, 0xb1, 0xbb, 0x41, 0x04, 0x84, 0x9c, 0xb9, 0xb8, 0xdc, 0x53, 0x4b, 0x1c, 0x93,
	0x93, 0xf3, 0x4b, 0xf3, 0x4a, 0x84, 0x64, 0xf4, 0x90, 0xcd, 0xd3, 0x83, 0x0a, 0x07, 0xa5, 0x16,
	0x96, 0xa6, 0x16, 0x97, 0x48, 0x89, 0x62, 0x95, 0x55, 0x62, 0x70, 0xb2, 0x8f, 0xb2, 0x2d, 0x4f,
	0x4d, 0x2c, 0x4b, 0xcd, 0x49, 0x4c, 0xd2, 0xab, 0xa8, 0xac, 0xd2, 0xcf, 0xcd, 0xcf, 0xcb, 0x2f,
	0x4a, 0xcc, 0xcc, 0xd1, 0x2f, 0xce, 0x48, 0x2c, 0x4a, 0x4d, 0xd1, 0x47, 0x38, 0x2b, 0x25, 0xb3,
	0xb8, 0x44, 0x3f, 0x1d, 0xdd, 0x53, 0x49, 0x6c, 0x60, 0x15, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x12, 0x7e, 0x0f, 0x18, 0xf7, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FinanceClient is the client API for Finance service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FinanceClient interface {
	GetAccount(ctx context.Context, in *insysproto.AccountRequest, opts ...grpc.CallOption) (*insysproto.Account, error)
}

type financeClient struct {
	cc *grpc.ClientConn
}

func NewFinanceClient(cc *grpc.ClientConn) FinanceClient {
	return &financeClient{cc}
}

func (c *financeClient) GetAccount(ctx context.Context, in *insysproto.AccountRequest, opts ...grpc.CallOption) (*insysproto.Account, error) {
	out := new(insysproto.Account)
	err := c.cc.Invoke(ctx, "/financeproto.Finance/GetAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FinanceServer is the server API for Finance service.
type FinanceServer interface {
	GetAccount(context.Context, *insysproto.AccountRequest) (*insysproto.Account, error)
}

func RegisterFinanceServer(s *grpc.Server, srv FinanceServer) {
	s.RegisterService(&_Finance_serviceDesc, srv)
}

func _Finance_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(insysproto.AccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinanceServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/financeproto.Finance/GetAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinanceServer).GetAccount(ctx, req.(*insysproto.AccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Finance_serviceDesc = grpc.ServiceDesc{
	ServiceName: "financeproto.Finance",
	HandlerType: (*FinanceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAccount",
			Handler:    _Finance_GetAccount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protorepo/services/insys/finance.proto",
}
