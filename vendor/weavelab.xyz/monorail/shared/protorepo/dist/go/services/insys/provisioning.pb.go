// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protorepo/services/insys/provisioning.proto

package insys

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
	insysproto "weavelab.xyz/monorail/shared/protorepo/dist/go/messages/insysproto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("protorepo/services/insys/provisioning.proto", fileDescriptor_4929fe8f6b859ecc)
}

var fileDescriptor_4929fe8f6b859ecc = []byte{
	// 176 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x90, 0x31, 0xab, 0xc2, 0x40,
	0x10, 0x06, 0x5f, 0xf5, 0x8a, 0x90, 0x42, 0x52, 0xa6, 0xb4, 0x34, 0x70, 0x0b, 0x5a, 0x8b, 0x60,
	0x67, 0x27, 0x96, 0x76, 0x17, 0xb3, 0xc4, 0x85, 0xe4, 0xf6, 0xdc, 0x3d, 0xa3, 0x11, 0xfc, 0xef,
	0xc2, 0x15, 0x7a, 0xa4, 0x10, 0xdb, 0x61, 0xa6, 0xf8, 0xbe, 0xac, 0xf2, 0xc2, 0x81, 0x05, 0x3d,
	0x83, 0xa2, 0x0c, 0x74, 0x42, 0x05, 0x72, 0x3a, 0x2a, 0x78, 0xe1, 0x81, 0x94, 0xd8, 0x91, 0x6b,
	0x4d, 0xb4, 0x8a, 0x3c, 0x65, 0x65, 0x92, 0xf6, 0xa8, 0x6a, 0xdb, 0x2f, 0xe9, 0xf2, 0x99, 0xe5,
	0xfb, 0x84, 0x16, 0x7d, 0x36, 0xdb, 0x39, 0x0a, 0x64, 0xbb, 0x37, 0x2e, 0x16, 0x26, 0x0d, 0x63,
	0x67, 0xa6, 0xd2, 0x01, 0x2f, 0x57, 0xd4, 0x50, 0x56, 0x3f, 0xb9, 0xea, 0xd9, 0x29, 0xce, 0xff,
	0xb6, 0x9b, 0xe3, 0xfa, 0x86, 0x76, 0xc0, 0xce, 0xd6, 0xe6, 0x3e, 0x3e, 0xa0, 0x67, 0xc7, 0x62,
	0xa9, 0x03, 0x3d, 0x5b, 0xc1, 0x06, 0x3e, 0x53, 0x1a, 0xd2, 0x00, 0xed, 0xf4, 0x8d, 0xfa, 0x3f,
	0x1a, 0xab, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0x2e, 0x04, 0x83, 0x55, 0x30, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ProvisioningClient is the client API for Provisioning service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProvisioningClient interface {
	InitialProvision(ctx context.Context, in *insysproto.InitialProvisionRequest, opts ...grpc.CallOption) (*insysproto.InitialProvisionResponse, error)
}

type provisioningClient struct {
	cc *grpc.ClientConn
}

func NewProvisioningClient(cc *grpc.ClientConn) ProvisioningClient {
	return &provisioningClient{cc}
}

func (c *provisioningClient) InitialProvision(ctx context.Context, in *insysproto.InitialProvisionRequest, opts ...grpc.CallOption) (*insysproto.InitialProvisionResponse, error) {
	out := new(insysproto.InitialProvisionResponse)
	err := c.cc.Invoke(ctx, "/provisioning.Provisioning/InitialProvision", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProvisioningServer is the server API for Provisioning service.
type ProvisioningServer interface {
	InitialProvision(context.Context, *insysproto.InitialProvisionRequest) (*insysproto.InitialProvisionResponse, error)
}

func RegisterProvisioningServer(s *grpc.Server, srv ProvisioningServer) {
	s.RegisterService(&_Provisioning_serviceDesc, srv)
}

func _Provisioning_InitialProvision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(insysproto.InitialProvisionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProvisioningServer).InitialProvision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provisioning.Provisioning/InitialProvision",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProvisioningServer).InitialProvision(ctx, req.(*insysproto.InitialProvisionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Provisioning_serviceDesc = grpc.ServiceDesc{
	ServiceName: "provisioning.Provisioning",
	HandlerType: (*ProvisioningServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InitialProvision",
			Handler:    _Provisioning_InitialProvision_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protorepo/services/insys/provisioning.proto",
}
